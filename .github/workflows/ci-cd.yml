name: PACS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/pacs

jobs:
  # Testing job
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [flask_auth_service, orthanc_config]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    
    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov pytest-flask flake8 black mypy
        if [ -f ${{ matrix.service }}/requirements.txt ]; then
          pip install -r ${{ matrix.service }}/requirements.txt
        fi
    
    - name: Lint with flake8
      run: |
        flake8 ${{ matrix.service }} --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ${{ matrix.service }} --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check ${{ matrix.service }}
    
    - name: Type check with mypy
      run: mypy ${{ matrix.service }} --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        cd ${{ matrix.service }}
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # Build Docker images
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: flask_auth
            context: ./flask_auth_service
            dockerfile: Dockerfile
          - service: nginx
            context: ./config/nginx
            dockerfile: Dockerfile

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.context }}/${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start
    
    - name: Run integration tests
      run: |
        docker-compose exec -T flask_auth_service pytest tests/integration/
        docker-compose exec -T nginx curl -f http://localhost/health
        docker-compose exec -T orthanc curl -f http://localhost:8042/system
    
    - name: Check service logs
      if: failure()
      run: docker-compose logs
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Deploy to staging
  deploy-staging:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/pacs
          git pull origin develop
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
          docker system prune -f

  # Deploy to production
  deploy-production:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create backup before deployment
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/pacs
          ./backup.sh full
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/pacs
          git fetch --tags
          git checkout ${{ github.event.release.tag_name }}
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
          docker system prune -f
    
    - name: Health check
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          sleep 60
          curl -f https://${{ secrets.PROD_HOST }}/health || exit 1
          curl -f https://${{ secrets.PROD_HOST }}/orthanc/system || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment ${{ github.event.release.tag_name }} - ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Backup verification  
  verify-backup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Verify production backups
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/pacs
          ./scripts/verify_backups.sh
    
    - name: Alert on backup failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: 'failure'
        text: 'PACS backup verification failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }} 