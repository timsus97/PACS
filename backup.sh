#!/bin/bash

# Clinton Medical PACS - Backup Script
# Author: Tim Hunt (tr00x)
# Version: 1.0

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Configuration
BACKUP_DIR="backup"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="clinton_pacs_${TIMESTAMP}"
BACKUP_PATH="${BACKUP_DIR}/${BACKUP_NAME}"

print_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                  üè• CLINTON MEDICAL PACS üè•                  ‚ïë"
    echo "‚ïë                  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ                      ‚ïë"
    echo "‚ïë                   Author: Tim Hunt (tr00x)                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_step() {
    echo -e "${YELLOW}[STEP]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create backup directory
create_backup_dir() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π..."
    mkdir -p "$BACKUP_PATH"
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_PATH"
}

# Backup Docker volumes
backup_volumes() {
    print_step "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Docker volumes..."
    
    # Get volume names
    local volumes=(
        "ort_ohif1_pacs_db_data"
        "ort_ohif1_pacs_orthanc_data" 
        "ort_ohif1_pacs_flask_auth_data"
    )
    
    for volume in "${volumes[@]}"; do
        if docker volume inspect "$volume" &>/dev/null; then
            echo -n "  –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ $volume... "
            docker run --rm \
                -v "$volume":/data:ro \
                -v "$(pwd)/$BACKUP_PATH":/backup \
                alpine:latest \
                tar czf "/backup/${volume}.tar.gz" -C /data . 2>/dev/null
            echo -e "${GREEN}‚úì${NC}"
        else
            echo -e "  Volume $volume –Ω–µ –Ω–∞–π–¥–µ–Ω ${YELLOW}‚ö†${NC}"
        fi
    done
    
    print_success "Docker volumes —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
}

# Backup configuration files
backup_configs() {
    print_step "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # Create config backup directory
    mkdir -p "$BACKUP_PATH/config"
    
    # Copy important config files
    local configs=(
        "docker-compose.yml"
        ".env"
        "config/"
        "flask_auth_service/"
        "login_app/"
    )
    
    for config in "${configs[@]}"; do
        if [ -e "$config" ]; then
            echo -n "  –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ $config... "
            cp -r "$config" "$BACKUP_PATH/config/" 2>/dev/null
            echo -e "${GREEN}‚úì${NC}"
        else
            echo -e "  $config –Ω–µ –Ω–∞–π–¥–µ–Ω ${YELLOW}‚ö†${NC}"
        fi
    done
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
}

# Backup database
backup_database() {
    print_step "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL..."
    
    if docker-compose ps | grep -q "pacs_db.*Up"; then
        echo -n "  –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö... "
        docker-compose exec -T db_pacs pg_dump -U orthanc_user orthanc > "$BACKUP_PATH/database_dump.sql" 2>/dev/null
        echo -e "${GREEN}‚úì${NC}"
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    else
        print_error "PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# Backup logs
backup_logs() {
    print_step "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤..."
    
    if [ -d "logs" ]; then
        echo -n "  –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤... "
        cp -r logs "$BACKUP_PATH/" 2>/dev/null
        echo -e "${GREEN}‚úì${NC}"
        print_success "–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
    else
        echo -e "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ${YELLOW}‚ö†${NC}"
    fi
}

# Create backup info file
create_backup_info() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    cat > "$BACKUP_PATH/backup_info.txt" << EOF
Clinton Medical PACS - Backup Information
======================================

Backup Date: $(date)
Backup Name: $BACKUP_NAME
System: $(uname -a)
Docker Version: $(docker --version 2>/dev/null || echo "Not found")
Docker Compose Version: $(docker-compose --version 2>/dev/null || echo "Not found")

Services Status at Backup Time:
$(docker-compose ps 2>/dev/null || echo "Docker Compose not available")

Backup Contents:
- Docker Volumes (DICOM data, Database, Flask data)
- Configuration Files (docker-compose.yml, .env, config/)
- Database Dump (PostgreSQL)
- Application Logs
- SSL Certificates
- Custom Scripts

Restore Instructions:
1. Stop current system: docker-compose down
2. Restore volumes: ./restore.sh $BACKUP_NAME
3. Start system: docker-compose up -d

Author: Tim Hunt (tr00x)
Version: 1.0
EOF
    
    print_success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
}

# Compress backup
compress_backup() {
    print_step "–°–∂–∞—Ç–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    
    cd "$BACKUP_DIR"
    echo -n "  –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞... "
    tar czf "${BACKUP_NAME}.tar.gz" "$BACKUP_NAME" 2>/dev/null
    echo -e "${GREEN}‚úì${NC}"
    
    # Remove uncompressed directory
    rm -rf "$BACKUP_NAME"
    
    cd - > /dev/null
    print_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–∂–∞—Ç–∞: ${BACKUP_DIR}/${BACKUP_NAME}.tar.gz"
}

# Calculate backup size
show_backup_info() {
    local backup_file="${BACKUP_DIR}/${BACKUP_NAME}.tar.gz"
    local size=$(du -h "$backup_file" | cut -f1)
    
    echo ""
    echo -e "${GREEN}üéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    echo ""
    echo -e "${BLUE}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:${NC}"
    echo -e "  –§–∞–π–ª: ${GREEN}$backup_file${NC}"
    echo -e "  –†–∞–∑–º–µ—Ä: ${GREEN}$size${NC}"
    echo -e "  –í—Ä–µ–º—è: ${GREEN}$(date)${NC}"
    echo ""
    echo -e "${BLUE}üíæ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:${NC}"
    echo "  ‚úÖ Docker volumes (–¥–∞–Ω–Ω—ã–µ PACS)"
    echo "  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL" 
    echo "  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    echo "  ‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    echo "  ‚úÖ –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
    echo "  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã"
    echo ""
}

# Cleanup old backups (keep last 7)
cleanup_old_backups() {
    print_step "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π..."
    
    # Keep only 7 most recent backups
    local backup_count=$(ls -1 "$BACKUP_DIR"/clinton_pacs_*.tar.gz 2>/dev/null | wc -l)
    
    if [ "$backup_count" -gt 7 ]; then
        local to_remove=$((backup_count - 7))
        echo "  –ù–∞–π–¥–µ–Ω–æ $backup_count —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, —É–¥–∞–ª—è–µ–º $to_remove —Å—Ç–∞—Ä—ã—Ö..."
        
        ls -1t "$BACKUP_DIR"/clinton_pacs_*.tar.gz | tail -n "$to_remove" | while read -r file; do
            echo -n "    –£–¥–∞–ª–µ–Ω–∏–µ $(basename "$file")... "
            rm -f "$file"
            echo -e "${GREEN}‚úì${NC}"
        done
        
        print_success "–°—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —É–¥–∞–ª–µ–Ω—ã"
    else
        print_success "–û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ($backup_count/7 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π)"
    fi
}

# Main backup function
main() {
    print_banner
    
    # Check if Docker is running
    if ! docker info > /dev/null 2>&1; then
        print_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        exit 1
    fi
    
    create_backup_dir
    backup_volumes
    backup_configs
    backup_database
    backup_logs
    create_backup_info
    compress_backup
    cleanup_old_backups
    show_backup_info
}

# Run backup
main "$@" 