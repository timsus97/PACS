#!/bin/bash

# Klinika Pro PACS - Automatic Installation Script
# Author: Tim Hunt (tr00x)
# Version: 1.0

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="Klinika Pro PACS"
PROJECT_VERSION="1.0"
AUTHOR="Tim Hunt (tr00x)"

# Print banner
print_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üè• KLINIKA PRO PACS üè•                    ‚ïë"
    echo "‚ïë              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ v1.0                  ‚ïë"
    echo "‚ïë                   Author: Tim Hunt (tr00x)                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Print step
print_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

# Print success
print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Print warning
print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Print error
print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root!"
        print_warning "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ sudo"
        exit 1
    fi
}

# Detect OS
detect_os() {
    print_step "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        if [ -f /etc/ubuntu-release ] || [ -f /etc/debian_version ]; then
            DISTRO="debian"
            PKG_MANAGER="apt"
        elif [ -f /etc/redhat-release ] || [ -f /etc/centos-release ]; then
            DISTRO="redhat"
            PKG_MANAGER="yum"
        elif [ -f /etc/arch-release ]; then
            DISTRO="arch"
            PKG_MANAGER="pacman"
        else
            DISTRO="unknown"
            PKG_MANAGER="unknown"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        DISTRO="macos"
        PKG_MANAGER="brew"
    else
        OS="unknown"
        DISTRO="unknown"
        PKG_MANAGER="unknown"
    fi
    
    print_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS ($DISTRO)"
}

# Check system requirements
check_requirements() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # Check RAM
    if [[ "$OS" == "linux" ]]; then
        TOTAL_RAM=$(free -g | awk '/^Mem:/{print $2}')
    elif [[ "$OS" == "macos" ]]; then
        TOTAL_RAM=$(sysctl -n hw.memsize | awk '{print int($1/1024/1024/1024)}')
    fi
    
    if [ "$TOTAL_RAM" -lt 8 ]; then
        print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 8GB RAM. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${TOTAL_RAM}GB"
    else
        print_success "RAM: ${TOTAL_RAM}GB ‚úì"
    fi
    
    # Check disk space
    AVAILABLE_SPACE=$(df -h . | awk 'NR==2{print $4}' | sed 's/[^0-9]//g')
    if [ "$AVAILABLE_SPACE" -lt 100 ]; then
        print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞"
    else
        print_success "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úì"
    fi
}

# Install Docker
install_docker() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    if command -v docker &> /dev/null; then
        print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
        return
    fi
    
    case $PKG_MANAGER in
        "apt")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ Debian/Ubuntu..."
            sudo apt update
            sudo apt install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        "yum")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ RedHat/CentOS..."
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        "brew")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ macOS..."
            brew install --cask docker
            print_warning "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏–∑ Applications"
            ;;
        *)
            print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/get-docker/"
            exit 1
            ;;
    esac
    
    # Add user to docker group (Linux only)
    if [[ "$OS" == "linux" ]]; then
        sudo usermod -aG docker $USER
        print_warning "–ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    fi
    
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# Install Docker Compose
install_docker_compose() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
    
    if command -v docker-compose &> /dev/null || docker compose version &> /dev/null; then
        print_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    if [[ "$OS" == "linux" ]]; then
        print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    fi
}

# Setup environment
setup_environment() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # Create .env file if not exists
    if [ ! -f .env ]; then
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env..."
        cat > .env << EOF
# Klinika Pro PACS Configuration
# Generated automatically by install.sh

# Database Configuration
POSTGRES_DB=orthanc
POSTGRES_USER=orthanc_user
POSTGRES_PASSWORD=$(openssl rand -base64 32)

# Orthanc Configuration
ORTHANC_USERNAME=admin_pacs
ORTHANC_PASSWORD=$(openssl rand -base64 24)

# Flask Authentication
FLASK_AUTH_SECRET_KEY=$(openssl rand -base64 48)
JWT_SECRET_KEY=$(openssl rand -base64 48)
JWT_ACCESS_TOKEN_EXPIRES_HOURS_DOCTOR_OPERATOR=8
JWT_ACCESS_TOKEN_EXPIRES_HOURS_ADMIN=24

# Network Configuration
NGINX_PORT_HTTP=80
NGINX_PORT_HTTPS=443

# Timezone
TZ=UTC

# Generated on: $(date)
# Version: 1.0
# Author: Tim Hunt (tr00x)
EOF
        print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"
    else
        print_success "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# Generate SSL certificates
generate_ssl() {
    print_step "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    mkdir -p config/ssl
    
    if [ ! -f config/ssl/klinika-pacs.crt ]; then
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
        
        # Create OpenSSL config
        cat > config/ssl/openssl.cnf << EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C=RU
ST=Moscow
L=Moscow
O=Klinika Pro
OU=IT Department
CN=localhost

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = *.localhost
IP.1 = 127.0.0.1
IP.2 = ::1
EOF
        
        # Generate private key and certificate
        openssl req -x509 -newkey rsa:4096 -keyout config/ssl/klinika-pacs.key -out config/ssl/klinika-pacs.crt -days 365 -nodes -config config/ssl/openssl.cnf
        
        # Set permissions
        chmod 600 config/ssl/klinika-pacs.key
        chmod 644 config/ssl/klinika-pacs.crt
        
        print_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω"
    else
        print_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# Create required directories
create_directories() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs/{nginx,orthanc,flask_auth,postgres,ohif}
    mkdir -p orthanc/dicom-test-data
    mkdir -p backup
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# Download test DICOM data
download_test_data() {
    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö DICOM –¥–∞–Ω–Ω—ã—Ö..."
    
    if [ ! "$(ls -A orthanc/dicom-test-data/)" ]; then
        if command -v wget &> /dev/null; then
            # Download sample DICOM files
            cd orthanc/dicom-test-data
            wget -q "https://github.com/darcymason/pydicom/raw/main/tests/test_files/CT_small.dcm" || true
            wget -q "https://github.com/darcymason/pydicom/raw/main/tests/test_files/MR_small.dcm" || true
            cd ../..
            print_success "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        else
            print_warning "wget –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
        fi
    else
        print_success "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å"
    fi
}

# Build and start services
start_services() {
    print_step "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Stop any existing containers
    docker-compose down 2>/dev/null || true
    
    # Kill processes on required ports
    print_step "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤..."
    sudo lsof -ti:80 | xargs kill -9 2>/dev/null || true
    sudo lsof -ti:443 | xargs kill -9 2>/dev/null || true
    lsof -ti:8042 | xargs kill -9 2>/dev/null || true
    lsof -ti:5001 | xargs kill -9 2>/dev/null || true
    
    # Build and start
    print_step "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    print_step "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d
    
    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
}

# Wait for services
wait_for_services() {
    print_step "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"
    for i in {1..30}; do
        echo -n "."
        sleep 2
        
        # Check if services are ready
        if curl -s -k https://localhost/ > /dev/null 2>&1; then
            echo ""
            print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!"
            return
        fi
    done
    
    echo ""
    print_warning "–°–µ—Ä–≤–∏—Å—ã –≤—Å–µ –µ—â–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: docker-compose ps"
}

# Print final instructions
print_final_instructions() {
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë                    üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! üéâ                ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${BLUE}üì± –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:${NC}"
    echo -e "   üåê –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${GREEN}https://localhost${NC}"
    echo -e "   üîê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞:      ${GREEN}https://localhost/login${NC}"
    echo -e "   üè• Orthanc –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:   ${GREEN}http://localhost:8042${NC}"
    echo ""
    echo -e "${BLUE}üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:${NC}"
    echo -e "   üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${GREEN}admin / admin${NC}"
    echo -e "   üë©‚Äç‚öïÔ∏è –í—Ä–∞—á:          ${GREEN}doctor / doctor${NC}"
    echo -e "   üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä:      ${GREEN}operator / operator${NC}"
    echo ""
    echo -e "${BLUE}üõ†Ô∏è –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "   üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:     ${YELLOW}docker-compose ps${NC}"
    echo -e "   üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:      ${YELLOW}docker-compose logs -f${NC}"
    echo -e "   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:          ${YELLOW}docker-compose restart${NC}"
    echo -e "   ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:           ${YELLOW}docker-compose down${NC}"
    echo -e "   üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç –¥–∞–Ω–Ω—ã–µ: ${YELLOW}./upload.sh${NC}"
    echo ""
    echo -e "${PURPLE}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_QUICK_START.md${NC}"
    echo -e "${PURPLE}üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ARCHITECTURE.md${NC}"
    echo -e "${PURPLE}‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: TECH_STACK.md${NC}"
    echo ""
    echo -e "${GREEN}–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üöÄ${NC}"
}

# Main installation function
main() {
    print_banner
    
    check_root
    detect_os
    check_requirements
    install_docker
    install_docker_compose
    setup_environment
    generate_ssl
    create_directories
    download_test_data
    start_services
    wait_for_services
    print_final_instructions
}

# Run installation
main "$@" 